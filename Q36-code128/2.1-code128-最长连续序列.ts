/**
 * 

给定一个未排序的整数数组 nums ，
找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。

请你设计并实现时间复杂度为 O(n) 的算法解决此问题。

 
示例 1：
输入：nums = [100,4,200,1,3,2]
输出：4
解释：最长数字连续序列是 [1, 2, 3, 4]。它的长度为 4。


示例 2：
输入：nums = [0,3,7,2,5,8,4,6,0,1]
输出：9

示例 3：
输入：nums = [1,0,1,2]
输出：3

*/

export {};

/*
思考路径
1. 理解题目要求：找最长连续序列
  - 最长：需要找出 所有可能的连续序列中 最长的那个
  - 连续：序列中的元素是连续的，即相邻元素的差为1
  - 无序：数组是无序的

2. 从简单情况入手：有序数组
  - 最长连续序列就是：从头开始，依次往后找，直到找到 不连续的元素为止


3. 无序情况：思考连续序列的特点
  - 序列的起点应该是 连续序列中最小的那个数
  - 即 当且仅当它的 前一个数不在数组中，才可能是起点
  - 如果我们能找到 所有起点，就能找到 所有可能的连续序列
  - 实现方法：使用Set，可以快速查找当前元素的 前一个数 是否存在


4. 优化：避免重复计算和剪枝
  - 避免重复计算：如果一个数已经在某个序列中，就不用再以它为起点
  - 剪枝：如果当前找到的序列长度 已经超过剩余未处理的数的个数，就可以提前结束


*/

function longestConsecutive(nums: number[]): number {
  const numSet = new Set(nums);
  let res = 0;
  // S1 遍历所有可能的起点
  for (const num of numSet) {
    // S2 如果当前元素的 前一个数 存在，
    // 说明它必然不可能是 序列的起点，直接跳过
    if (numSet.has(num - 1)) continue;
    // S3 找到当前序列的终点，以获取一个可能的返回值
    let nextVal = num + 1;
    while (numSet.has(nextVal)) nextVal++;
    // S4 更新res，获取其最大值
    res = Math.max(res, nextVal - num);
    // S5 如果当前序列长度 已经是可能的最大值，就可以提前结束
    if (res === nums.length) break;
  }
  return res;
}
